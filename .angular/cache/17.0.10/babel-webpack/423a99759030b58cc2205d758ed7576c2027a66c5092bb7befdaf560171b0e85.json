{"ast":null,"code":"import { SigCapture } from \"./capture\";\nimport { BITMAP_BACKGROUNDCOLOR, BITMAP_IMAGEFORMAT, BITMAP_INKCOLOR, BITMAP_INKWIDTH, BITMAP_PADDING_X, BITMAP_PADDING_Y } from './SigCaptX-Globals';\nimport { SessionControl } from './SigCaptX-SessionControl';\nimport * as i0 from \"@angular/core\";\nexport class SetSigText {\n  setSignatureText() {\n    SetSigText.restoreSignature();\n  }\n  /* This function takes the SigText value currently displayed on the HTML form and uses it to recreate the signature image shown in the signature control tag on the form */\n  static {\n    this.restoreSignature = () => {\n      if (null === SigCapture.sigObj) {\n        SessionControl.actionWhenRestarted(); // See SigCaptX-SessionControl.js\n        return;\n      }\n      /* First of all take the SigText value currently displayed in the txtSignature field on the form and assign it to the sigObj object */\n      SigCapture.sigObj.PutSigText(SigCapture.HTMLTagIds.textSig.value, SetSigText.onPutSigText);\n    };\n  }\n  static {\n    this.onPutSigText = (sigObjV, status) => {\n      if (window.sdkPtr.ResponseStatus.OK == status) {\n        /* Now that the sigObj has been populated with the signature data (via the SigText) it can be used to generate a signature image */\n        var outputFlags = window.sdkPtr.RBFlags.RenderOutputPicture | window.sdkPtr.RBFlags.RenderColor24BPP;\n        SigCapture.sigObj.RenderBitmap(BITMAP_IMAGEFORMAT, SigCapture.HTMLTagIds.imageBox.clientWidth, SigCapture.HTMLTagIds.imageBox.clientHeight, BITMAP_INKWIDTH, BITMAP_INKCOLOR, BITMAP_BACKGROUNDCOLOR, outputFlags, BITMAP_PADDING_X, BITMAP_PADDING_Y, SetSigText.onRenderBitmapFromSigText);\n      } else {\n        SigCapture.print(\"SetSignatureText() error: \" + status);\n        if (window.sdkPtr.ResponseStatus.INVALID_SESSION == status) {\n          SigCapture.print(\"Session error. Restarting the session.\");\n          SessionControl.actionWhenRestarted(); // See SigCaptX-SessionControl.js\n        }\n      }\n    };\n  }\n  /* Take the image generated by RenderBitmap and use it to populate the signature image control on the form */\n  static {\n    this.onRenderBitmapFromSigText = (sigObjV, bmpObj, status) => {\n      if (SigCapture.callbackStatusOK(\"Signature Render Bitmap\", status)) {\n        if (null === SigCapture.HTMLTagIds.imageBox.firstChild) {\n          SigCapture.HTMLTagIds.imageBox.appendChild(bmpObj.image);\n        } else {\n          SigCapture.HTMLTagIds.imageBox.replaceChild(bmpObj.image, SigCapture.HTMLTagIds.imageBox.firstChild);\n        }\n      }\n    };\n  }\n  static {\n    this.ɵfac = function SetSigText_Factory(t) {\n      return new (t || SetSigText)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SetSigText,\n      selectors: [[\"btn-restore\"]],\n      decls: 1,\n      vars: 0,\n      consts: [[\"type\", \"button\", \"id\", \"Restore\", \"value\", \"Restore\", \"disabled\", \"\", \"title\", \"Restores the signature from the SigText data. To use this function please tick <Output SigText to form>\", 2, \"height\", \"10mm\", \"width\", \"35mm\", 3, \"click\"]],\n      template: function SetSigText_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"input\", 0);\n          i0.ɵɵlistener(\"click\", function SetSigText_Template_input_click_0_listener() {\n            return ctx.setSignatureText();\n          });\n          i0.ɵɵelementEnd();\n        }\n      },\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["SigCapture","BITMAP_BACKGROUNDCOLOR","BITMAP_IMAGEFORMAT","BITMAP_INKCOLOR","BITMAP_INKWIDTH","BITMAP_PADDING_X","BITMAP_PADDING_Y","SessionControl","SetSigText","setSignatureText","restoreSignature","sigObj","actionWhenRestarted","PutSigText","HTMLTagIds","textSig","value","onPutSigText","sigObjV","status","window","sdkPtr","ResponseStatus","OK","outputFlags","RBFlags","RenderOutputPicture","RenderColor24BPP","RenderBitmap","imageBox","clientWidth","clientHeight","onRenderBitmapFromSigText","print","INVALID_SESSION","bmpObj","callbackStatusOK","firstChild","appendChild","image","replaceChild","selectors","decls","vars","consts","template","SetSigText_Template","rf","ctx","i0","ɵɵelementStart","ɵɵlistener","SetSigText_Template_input_click_0_listener","ɵɵelementEnd"],"sources":["C:\\Users\\PROGRAMA2WEB\\Desktop\\wacom-pruebas\\sdk-for-signature-sigcaptx-windows-master\\Samples\\AngularNG\\capture\\src\\app\\setsigtext.ts","C:\\Users\\PROGRAMA2WEB\\Desktop\\wacom-pruebas\\sdk-for-signature-sigcaptx-windows-master\\Samples\\AngularNG\\capture\\src\\app\\btnrestore.html"],"sourcesContent":["/* **************************************************************************\r\n  setsigtext.ts\r\n   \r\n  This file contains the source code for regenerating the original signature\r\n  image from the SigText value which is currently displayed in the SigText\r\n  text box on the main form.\r\n\r\n  The \"setSignatureText()\" function is triggered by the click event on the \r\n  \"Restore\" button on the form as defined in btnrestore.html\r\n  \r\n  Copyright (c) 2021 Wacom Co. Ltd. All rights reserved.\r\n  \r\n  v1.0\r\n  \r\n***************************************************************************/\r\nimport { Component } from '@angular/core';\r\nimport { SigCapture } from \"./capture\";\r\nimport { BITMAP_BACKGROUNDCOLOR, BITMAP_IMAGEFORMAT, BITMAP_INKCOLOR, BITMAP_INKWIDTH, BITMAP_PADDING_X, BITMAP_PADDING_Y } from './SigCaptX-Globals';\r\nimport { SessionControl } from './SigCaptX-SessionControl';\r\n\r\n@Component({\r\n    selector: 'btn-restore',\r\n    templateUrl: './btnrestore.html'\r\n  })\r\n\r\n  export class SetSigText\r\n  {\r\n     setSignatureText()\r\n     {\r\n       SetSigText.restoreSignature();\r\n     }\r\n  \r\n    /* This function takes the SigText value currently displayed on the HTML form and uses it to recreate the signature image shown in the signature control tag on the form */\r\n  \r\n    static restoreSignature = () =>\r\n    {\r\n        if(null === SigCapture.sigObj)\r\n        {\r\n            SessionControl.actionWhenRestarted();  // See SigCaptX-SessionControl.js\r\n            return;\r\n        }\r\n        /* First of all take the SigText value currently displayed in the txtSignature field on the form and assign it to the sigObj object */\r\n        SigCapture.sigObj.PutSigText(SigCapture.HTMLTagIds.textSig.value, SetSigText.onPutSigText);\r\n    }\r\n\r\n    static onPutSigText = (sigObjV, status) =>\r\n    {\r\n        if(window.sdkPtr.ResponseStatus.OK == status)\r\n        {\r\n            /* Now that the sigObj has been populated with the signature data (via the SigText) it can be used to generate a signature image */\r\n            var outputFlags = window.sdkPtr.RBFlags.RenderOutputPicture | window.sdkPtr.RBFlags.RenderColor24BPP;\r\n            \r\n            SigCapture.sigObj.RenderBitmap(BITMAP_IMAGEFORMAT, SigCapture.HTMLTagIds.imageBox.clientWidth, SigCapture.HTMLTagIds.imageBox.clientHeight, BITMAP_INKWIDTH, BITMAP_INKCOLOR, BITMAP_BACKGROUNDCOLOR, outputFlags, BITMAP_PADDING_X, BITMAP_PADDING_Y, SetSigText.onRenderBitmapFromSigText);\r\n        }\r\n        else\r\n        {\r\n            SigCapture.print(\"SetSignatureText() error: \" + status); \r\n            if(window.sdkPtr.ResponseStatus.INVALID_SESSION == status)\r\n            {\r\n                SigCapture.print(\"Session error. Restarting the session.\");\r\n                SessionControl.actionWhenRestarted();  // See SigCaptX-SessionControl.js\r\n            }\r\n        }\r\n    }\r\n    /* Take the image generated by RenderBitmap and use it to populate the signature image control on the form */\r\n    static onRenderBitmapFromSigText = (sigObjV, bmpObj, status) =>\r\n    {\r\n        if(SigCapture.callbackStatusOK(\"Signature Render Bitmap\", status))\r\n        {\r\n            if(null === SigCapture.HTMLTagIds.imageBox.firstChild)\r\n            {\r\n                SigCapture.HTMLTagIds.imageBox.appendChild(bmpObj.image);\r\n            }\r\n            else\r\n            {\r\n                SigCapture.HTMLTagIds.imageBox.replaceChild(bmpObj.image, SigCapture.HTMLTagIds.imageBox.firstChild);\r\n            }\r\n        } \r\n    } \r\n}","<input type=\"button\" id=\"Restore\" value=\"Restore\" disabled style=\"height:10mm;width:35mm\" (click)=\"setSignatureText()\"\r\ntitle=\"Restores the signature from the SigText data. To use this function please tick <Output SigText to form>\" />"],"mappings":"AAgBA,SAASA,UAAU,QAAQ,WAAW;AACtC,SAASC,sBAAsB,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,oBAAoB;AACrJ,SAASC,cAAc,QAAQ,2BAA2B;;AAOxD,OAAM,MAAOC,UAAU;EAEpBC,gBAAgBA,CAAA;IAEdD,UAAU,CAACE,gBAAgB,EAAE;EAC/B;EAED;;IAEO,KAAAA,gBAAgB,GAAG,MAAK;MAE3B,IAAG,IAAI,KAAKV,UAAU,CAACW,MAAM,EAC7B;QACIJ,cAAc,CAACK,mBAAmB,EAAE,CAAC,CAAE;QACvC;;MAEJ;MACAZ,UAAU,CAACW,MAAM,CAACE,UAAU,CAACb,UAAU,CAACc,UAAU,CAACC,OAAO,CAACC,KAAK,EAAER,UAAU,CAACS,YAAY,CAAC;IAC9F,CAAC;EAAA;;IAEM,KAAAA,YAAY,GAAG,CAACC,OAAO,EAAEC,MAAM,KAAI;MAEtC,IAAGC,MAAM,CAACC,MAAM,CAACC,cAAc,CAACC,EAAE,IAAIJ,MAAM,EAC5C;QACI;QACA,IAAIK,WAAW,GAAGJ,MAAM,CAACC,MAAM,CAACI,OAAO,CAACC,mBAAmB,GAAGN,MAAM,CAACC,MAAM,CAACI,OAAO,CAACE,gBAAgB;QAEpG3B,UAAU,CAACW,MAAM,CAACiB,YAAY,CAAC1B,kBAAkB,EAAEF,UAAU,CAACc,UAAU,CAACe,QAAQ,CAACC,WAAW,EAAE9B,UAAU,CAACc,UAAU,CAACe,QAAQ,CAACE,YAAY,EAAE3B,eAAe,EAAED,eAAe,EAAEF,sBAAsB,EAAEuB,WAAW,EAAEnB,gBAAgB,EAAEC,gBAAgB,EAAEE,UAAU,CAACwB,yBAAyB,CAAC;OAC/R,MAED;QACIhC,UAAU,CAACiC,KAAK,CAAC,4BAA4B,GAAGd,MAAM,CAAC;QACvD,IAAGC,MAAM,CAACC,MAAM,CAACC,cAAc,CAACY,eAAe,IAAIf,MAAM,EACzD;UACInB,UAAU,CAACiC,KAAK,CAAC,wCAAwC,CAAC;UAC1D1B,cAAc,CAACK,mBAAmB,EAAE,CAAC,CAAE;;;IAGnD,CAAC;EAAA;EACD;;IACO,KAAAoB,yBAAyB,GAAG,CAACd,OAAO,EAAEiB,MAAM,EAAEhB,MAAM,KAAI;MAE3D,IAAGnB,UAAU,CAACoC,gBAAgB,CAAC,yBAAyB,EAAEjB,MAAM,CAAC,EACjE;QACI,IAAG,IAAI,KAAKnB,UAAU,CAACc,UAAU,CAACe,QAAQ,CAACQ,UAAU,EACrD;UACIrC,UAAU,CAACc,UAAU,CAACe,QAAQ,CAACS,WAAW,CAACH,MAAM,CAACI,KAAK,CAAC;SAC3D,MAED;UACIvC,UAAU,CAACc,UAAU,CAACe,QAAQ,CAACW,YAAY,CAACL,MAAM,CAACI,KAAK,EAAEvC,UAAU,CAACc,UAAU,CAACe,QAAQ,CAACQ,UAAU,CAAC;;;IAGhH,CAAC;EAAA;;;uBArDU7B,UAAU;IAAA;EAAA;;;YAAVA,UAAU;MAAAiC,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,oBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCzBzBE,EAAA,CAAAC,cAAA,eACkH;UADxBD,EAAA,CAAAE,UAAA,mBAAAC,2CAAA;YAAA,OAASJ,GAAA,CAAAvC,gBAAA,EAAkB;UAAA,EAAC;UAAtHwC,EAAA,CAAAI,YAAA,EACkH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}