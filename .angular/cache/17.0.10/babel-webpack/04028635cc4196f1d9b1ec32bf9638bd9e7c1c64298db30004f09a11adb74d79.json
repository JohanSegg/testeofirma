{"ast":null,"code":"/* **************************************************************************\n  SigCaptX-SessionControl.ts\n   \n  This Typescript file contains functions to start up the connection with the SigCaptX service.\n  \n  Copyright (c) 2021 Wacom Co. Ltd. All rights reserved.\n  \n   v1.0\n  \n***************************************************************************/\nimport { LICENCEKEY, SERVICEPORT, TIMEOUT } from './SigCaptX-Globals';\nimport { SigCapture } from './capture';\nimport { WacomGSS_SignatureSDK, JSONreq } from './wgssSigCaptX';\nexport class SessionControl {\n  /* This static is called if connection with the SigCaptX service has to be re-initiated because for whatever reason it has stopped or failed */\n  static actionWhenRestarted() {\n    SigCapture.sigCtl = null;\n    SigCapture.dynCapt = null;\n    if (null != SigCapture.HTMLTagIds.imageBox.firstChild) {\n      SigCapture.HTMLTagIds.imageBox.removeChild(SigCapture.HTMLTagIds.imageBox.firstChild);\n    }\n    this.timeout = setTimeout(SessionControl.timedDetect, TIMEOUT);\n    // pass the starting service port  number as configured in the registry\n    console.log(\"Starting up WacomGSS_SignatureSDK\");\n    window.JSONreq = JSONreq;\n    let wgssSignatureSDK = new WacomGSS_SignatureSDK(SessionControl.onDetectRunning, SERVICEPORT);\n    window.sdkPtr = wgssSignatureSDK;\n  }\n  static timedDetect() {\n    if (window.sdkPtr.running) {\n      SigCapture.print(\"Signature SDK Service detected.\");\n      SessionControl.start();\n    } else {\n      SigCapture.print(\"Signature SDK Service not detected.\");\n    }\n  }\n  static onDetectRunning() {\n    if (window.sdkPtr.running) {\n      SigCapture.print(\"Signature SDK Service detected.\");\n      clearTimeout(this.timeout);\n      SigCapture.print(\"Starting...\");\n      SessionControl.start();\n    } else {\n      SigCapture.print(\"Signature SDK Service not detected.\");\n    }\n  }\n  static start() {\n    if (window.sdkPtr.running) {\n      SigCapture.print(\"Checking components ...\");\n      SigCapture.sigCtl = new window.sdkPtr.SigCtl(SessionControl.onSigCtlConstructor);\n    }\n  }\n  static onSigCtlConstructor(sigCtlV, status) {\n    if (SigCapture.callbackStatusOK(\"SigCtl Constructor\", status)) {\n      sigCtlV.PutLicence(LICENCEKEY, SessionControl.onSigCtlPutLicence);\n    }\n  }\n  static onDynCaptConstructor(dynCaptV, status) {\n    if (SigCapture.callbackStatusOK(\"DynCapt Constructor\", status)) {\n      SigCapture.sigCtl.GetSignature(SessionControl.onGetSignature);\n    }\n  }\n  static onSigCtlPutLicence(sigCtlV, status) {\n    if (SigCapture.callbackStatusOK(\"SigCtl PutLicence\", status)) {\n      SigCapture.dynCapt = new window.sdkPtr.DynamicCapture(SessionControl.onDynCaptConstructor);\n    }\n  }\n  static onGetSignature(sigCtlV, sigObjV, status) {\n    if (SigCapture.callbackStatusOK(\"SigCapt GetSignature\", status)) {\n      sigCtlV.GetProperty(\"Component_FileVersion\", SessionControl.onSigCtlGetFileVersion);\n    }\n  }\n  static onGetSigCaptXVersion(version, status) {\n    if (SigCapture.callbackStatusOK(\"SigCaptX GetVersion\", status)) {\n      SigCapture.print(\"SigCaptX  v\" + version);\n      SigCapture.sigCtl.GetProperty(\"Component_FileVersion\", SessionControl.onSigCtlGetFileVersion);\n    }\n  }\n  static onSigCtlGetFileVersion(sigCtlV, property, status) {\n    if (SigCapture.callbackStatusOK(\"SigCtl GetProperty\", status)) {\n      SigCapture.print(\"DLL: flSigCOM.dll  v\" + property.text);\n      SigCapture.dynCapt.GetProperty(\"Component_FileVersion\", SessionControl.onDynCaptGetFileVersion);\n    }\n  }\n  static onDynCaptGetFileVersion(dynCaptV, property, status) {\n    if (SigCapture.callbackStatusOK(\"DynCapt GetProperty\", status)) {\n      SigCapture.print(\"DLL: flSigCapt.dll v\" + property.text);\n      SigCapture.print(\"Test application ready.\");\n      SigCapture.print(\"Press 'Capture' to capture a signature.\");\n      /*\n      if('static' === typeof callback)\n      {\n        callback();\n      }\n      */\n    }\n  }\n}","map":{"version":3,"names":["LICENCEKEY","SERVICEPORT","TIMEOUT","SigCapture","WacomGSS_SignatureSDK","JSONreq","SessionControl","actionWhenRestarted","sigCtl","dynCapt","HTMLTagIds","imageBox","firstChild","removeChild","timeout","setTimeout","timedDetect","console","log","window","wgssSignatureSDK","onDetectRunning","sdkPtr","running","print","start","clearTimeout","SigCtl","onSigCtlConstructor","sigCtlV","status","callbackStatusOK","PutLicence","onSigCtlPutLicence","onDynCaptConstructor","dynCaptV","GetSignature","onGetSignature","DynamicCapture","sigObjV","GetProperty","onSigCtlGetFileVersion","onGetSigCaptXVersion","version","property","text","onDynCaptGetFileVersion"],"sources":["C:\\Users\\PROGRAMA2WEB\\Desktop\\wacom-pruebas\\sdk-for-signature-sigcaptx-windows-master\\Samples\\AngularNG\\capture\\src\\app\\SigCaptX-SessionControl.ts"],"sourcesContent":["/* **************************************************************************\n  SigCaptX-SessionControl.ts\n   \n  This Typescript file contains functions to start up the connection with the SigCaptX service. \n  \n  Copyright (c) 2021 Wacom Co. Ltd. All rights reserved.\n  \n   v1.0\n  \n***************************************************************************/\nimport { LICENCEKEY, SERVICEPORT, TIMEOUT } from './SigCaptX-Globals';\nimport { SigCapture } from './capture';\nimport { WacomGSS_SignatureSDK, JSONreq } from './wgssSigCaptX';\n\ndeclare global {\n  interface window {\n      JSONreq: any;\n      sdkPtr: any;  \n    }\n}\n\nexport class SessionControl\n{\n  static timeout: any;\n\n  /* This static is called if connection with the SigCaptX service has to be re-initiated because for whatever reason it has stopped or failed */\n  static actionWhenRestarted() \n  {\n    SigCapture.sigCtl = null;\n    SigCapture.dynCapt = null;\n    \n    if(null != SigCapture.HTMLTagIds.imageBox.firstChild)\n    {\n      SigCapture.HTMLTagIds.imageBox.removeChild(SigCapture.HTMLTagIds.imageBox.firstChild);\n    }\n    this.timeout = setTimeout(SessionControl.timedDetect, TIMEOUT);\n    \n    // pass the starting service port  number as configured in the registry\n    console.log(\"Starting up WacomGSS_SignatureSDK\");\n    window.JSONreq = JSONreq;\n\n    let wgssSignatureSDK = new WacomGSS_SignatureSDK(SessionControl.onDetectRunning, SERVICEPORT);\n    window.sdkPtr = wgssSignatureSDK;\n  }\n\n  static timedDetect() \n  {\n    if (window.sdkPtr.running) \n    {\n      SigCapture.print(\"Signature SDK Service detected.\");\n      SessionControl.start();\n    } \n    else \n    {\n      SigCapture.print(\"Signature SDK Service not detected.\");\n    }\n  }\n    \n  static onDetectRunning()\n  {\n    if (window.sdkPtr.running) \n    {\n      SigCapture.print(\"Signature SDK Service detected.\");\n      clearTimeout(this.timeout);\n      SigCapture.print(\"Starting...\")\n      SessionControl.start();\n    }\n    else \n    {\n      SigCapture.print(\"Signature SDK Service not detected.\");\n    }\n  }\n\n  static start()\n  {\n    if (window.sdkPtr.running) \n    {\n      SigCapture.print(\"Checking components ...\");\n      SigCapture.sigCtl = new window.sdkPtr.SigCtl(SessionControl.onSigCtlConstructor);\n    }\n  }    \n    \n  static onSigCtlConstructor(sigCtlV, status)\n  {\n    if(SigCapture.callbackStatusOK(\"SigCtl Constructor\", status))\n    {\n      sigCtlV.PutLicence(LICENCEKEY, SessionControl.onSigCtlPutLicence);\n    }\n  }\n\n  static onDynCaptConstructor(dynCaptV, status)\n  {\n    if(SigCapture.callbackStatusOK(\"DynCapt Constructor\", status))\n    {\n      SigCapture.sigCtl.GetSignature(SessionControl.onGetSignature);\n    }\n  }\n    \n  static onSigCtlPutLicence(sigCtlV, status) \n  {\n    if(SigCapture.callbackStatusOK(\"SigCtl PutLicence\", status))\n    {\n      SigCapture.dynCapt = new window.sdkPtr.DynamicCapture(SessionControl.onDynCaptConstructor);\n    }\n  }\n\n  static onGetSignature(sigCtlV, sigObjV, status)\n  {\n    if(SigCapture.callbackStatusOK(\"SigCapt GetSignature\", status))\n    {\n      sigCtlV.GetProperty(\"Component_FileVersion\", SessionControl.onSigCtlGetFileVersion);\n    }\n  }\n\n  static onGetSigCaptXVersion(version, status)\n  {\n    if(SigCapture.callbackStatusOK(\"SigCaptX GetVersion\", status))\n    {\n      SigCapture.print(\"SigCaptX  v\" + version);\n      SigCapture.sigCtl.GetProperty(\"Component_FileVersion\", SessionControl.onSigCtlGetFileVersion);\n    }\n  }\n    \n  static onSigCtlGetFileVersion(sigCtlV, property, status)\n  {\n    if(SigCapture.callbackStatusOK(\"SigCtl GetProperty\", status))\n    {\n      SigCapture.print(\"DLL: flSigCOM.dll  v\" + property.text);\n      SigCapture.dynCapt.GetProperty(\"Component_FileVersion\", SessionControl.onDynCaptGetFileVersion);\n    }\n  }\n\n  static onDynCaptGetFileVersion(dynCaptV, property, status)\n  {\n    if(SigCapture.callbackStatusOK(\"DynCapt GetProperty\", status))\n    {\n      SigCapture.print(\"DLL: flSigCapt.dll v\" + property.text);\n      SigCapture.print(\"Test application ready.\");\n      SigCapture.print(\"Press 'Capture' to capture a signature.\");\n      /*\n      if('static' === typeof callback)\n      {\n        callback();\n      }\n      */\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}